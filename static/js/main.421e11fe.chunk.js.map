{"version":3,"sources":["App.tsx","useTimer.ts","reportWebVitals.ts","index.tsx"],"names":["App","endtime","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","addZero","useCallback","num","useEffect","timeInterval","setInterval","milliseconds","Date","parse","toString","clearInterval","time","Math","floor","useTimer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAgBeA,MAZf,WAAgB,IAAD,ECFR,SAAkBC,GAAkB,IAAD,EAChBC,mBAAS,MADO,mBACjCC,EADiC,KAC3BC,EAD2B,OAEdF,mBAAS,MAFK,mBAEjCG,EAFiC,KAE1BC,EAF0B,OAGVJ,mBAAS,MAHC,mBAGjCK,EAHiC,KAGxBC,EAHwB,OAIVN,mBAAS,MAJC,mBAIjCO,EAJiC,KAIxBC,EAJwB,KAMlCC,EAAUC,uBAAY,SAACC,GAC3B,OAAQA,GAAO,EAAI,IAAMA,EAAMA,IAC9B,IAgCH,OA9BAC,qBAAU,WA2BR,IAAMC,EAAeC,aA1BrB,WACE,IAAMC,EACJC,KAAKC,MAAMlB,GAAWiB,KAAKC,OAAM,IAAID,MAAOE,YAE9C,GAAIH,GAAgB,EAMlB,OALAb,EAAQ,MACRE,EAAS,MACTE,EAAW,MACXE,EAAW,MAEJ,kBAAMW,cAAcN,IAE3B,IAAMO,EAAO,CACXnB,KAAMoB,KAAKC,MAAMP,EAAY,OAA0BG,WACvDf,MAAOkB,KAAKC,MAAOP,EAAY,KAAuB,IAAIG,WAC1Db,QAASgB,KAAKC,MAAOP,EAAe,IAAO,GAAM,IAAIG,WACrDX,QAASc,KAAKC,MAAOP,EAAe,IAAQ,IAAIG,YAGlDhB,EAAQO,EAAQW,EAAKnB,OACrBG,EAASK,EAAQW,EAAKjB,QACtBG,EAAWG,EAAQW,EAAKf,UACxBG,EAAWC,EAAQW,EAAKb,YAIkB,OAC7C,CAACE,EAASV,IAEN,CAACE,EAAME,EAAOE,EAASE,GDrCUgB,CAAS,uBADpC,mBACNtB,EADM,KACAE,EADA,KACOE,EADP,KACgBE,EADhB,KAGb,OACE,qBAAKiB,UAAU,MAAf,SACE,oBAAGA,UAAU,QAAb,UACGvB,EADH,IACUE,EADV,IACkBE,EADlB,IAC4BE,QEInBkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.421e11fe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useTimer } from \"./useTimer\";\n\nfunction App() {\n  const [days, hours, minutes, seconds] = useTimer(\"2021-01-03T13:00:00\");\n\n  return (\n    <div className=\"App\">\n      <p className=\"timer\">\n        {days}:{hours}:{minutes}:{seconds}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport function useTimer(endtime: string) {\r\n  const [days, setDays] = useState(\"00\");\r\n  const [hours, setHours] = useState(\"00\");\r\n  const [minutes, setMinutes] = useState(\"00\");\r\n  const [seconds, setSeconds] = useState(\"00\");\r\n\r\n  const addZero = useCallback((num: string) => {\r\n    return +num <= 9 ? \"0\" + num : num;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function updateClock() {\r\n      const milliseconds =\r\n        Date.parse(endtime) - Date.parse(new Date().toString());\r\n\r\n      if (milliseconds <= 0) {\r\n        setDays(\"00\");\r\n        setHours(\"00\");\r\n        setMinutes(\"00\");\r\n        setSeconds(\"00\");\r\n\r\n        return () => clearInterval(timeInterval);\r\n      } else {\r\n        const time = {\r\n          days: Math.floor(milliseconds / (1000 * 60 * 60 * 24)).toString(),\r\n          hours: Math.floor((milliseconds / (1000 * 60 * 60)) % 24).toString(),\r\n          minutes: Math.floor((milliseconds / 1000 / 60) % 60).toString(),\r\n          seconds: Math.floor((milliseconds / 1000) % 60).toString(),\r\n        };\r\n\r\n        setDays(addZero(time.days));\r\n        setHours(addZero(time.hours));\r\n        setMinutes(addZero(time.minutes));\r\n        setSeconds(addZero(time.seconds));\r\n      }\r\n    }\r\n\r\n    const timeInterval = setInterval(updateClock, 1000);\r\n  }, [addZero, endtime]);\r\n\r\n  return [days, hours, minutes, seconds];\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}